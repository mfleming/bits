#------------------------------------------------------------------------------
#
# Copyright (c) 2010, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------

c count = 0x10000
c int_break_event = 1

menuentry "Test round-trip latency via MWAIT" {
    set pager=1
    timer start ; cpu_ping $count ; timer stop $count
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

menuentry "MWAIT disable" {
    set pager=1
    set_mwait disable
    echo "MWAIT disabled"
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

menuentry "MWAIT enable C0" {
    set pager=1
    if c int_break_event == 1 ; then
      set_mwait enable 0xf
    else
      set_mwait enable 0xf --no-int-break-event
    fi
    echo "MWAIT enabled: C0"
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

cpuid32 --quiet --env 0
if c eax "<" 5 ; then
    c edx = 0
else
    cpuid32 --quiet --env 5
fi
if c ( ( edx ">>" 4 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c1.cfg; fi
if c ( ( edx ">>" 4 ) "&" 0xf ) ">=" 2 ; then source /boot/cfg/mwait.c1e.cfg; fi
if c ( ( edx ">>" 8 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c2.cfg; fi
if c ( ( edx ">>" 12 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c3.cfg; fi
if c ( ( edx ">>" 16 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c4.cfg; fi
if c ( ( edx ">>" 20 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c5.cfg; fi
if c ( ( edx ">>" 24 ) "&" 0xf ) ">=" 1 ; then source /boot/cfg/mwait.c6.cfg; fi

menuentry "* MWAIT C-state naming is per CPUID leaf 5 & not processor-specific!" {
    set pager=1
    if c eax "<" 5 ; then
        c edx = 0
    else
        cpuid32 --quiet --env 5
    fi
    if c ( ( edx ">>" 4 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT C1 is supported";  else echo "MWAIT C1 is not supported"; fi
    if c ( ( edx ">>" 4 ) "&" 0xf ) ">=" 2 ; then echo "MWAIT C1E is supported"; else echo "MWAIT C1E is not supported"; fi
    if c ( ( edx ">>" 8 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT *C2 is supported"; else echo "MWAIT *C2 is not supported"; fi
    if c ( ( edx ">>" 12 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT *C3 is supported"; else echo "MWAIT *C3 is not supported"; fi
    if c ( ( edx ">>" 16 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT *C4 is supported"; else echo "MWAIT *C4 is not supported"; fi
    if c ( ( edx ">>" 20 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT *C5 is supported"; else echo "MWAIT *C5 is not supported"; fi
    if c ( ( edx ">>" 24 ) "&" 0xf ) ">=" 1 ; then echo "MWAIT *C6 is supported"; else echo "MWAIT *C6 is not supported"; fi
    echo "RTFM for more details"
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

menuentry "Current state of Interrrupt Break Event" {
    set pager=1
    if c int_break_event == 1 ; then
        echo "Interrupt Break Event is enabled"
    else
        echo "Interrupt Break Event is disabled"
    fi
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

menuentry "Toggle Interrupt Break Event" {
    set pager=1
    c int_break_event ^= 1
    if c int_break_event == 1 ; then
        echo "Interrupt Break Event is enabled"
    else
        echo "Interrupt Break Event is disabled"
    fi
    py 'from bits import pause ; pause.pause()'
    set pager=0
}

if [ -e /boot/cfg/mwait.$cpufamily.common.cfg ]; then source /boot/cfg/mwait.$cpufamily.common.cfg; fi
if [ -e /boot/cfg/nodist/mwait.$cpufamily.common.cfg ]; then source /boot/cfg/nodist/mwait.$cpufamily.common.cfg; fi
if [ -e /boot/cfg/mwait.$cpu.cfg ]; then source /boot/cfg/mwait.$cpu.cfg; fi
if [ -e /boot/cfg/nodist/mwait.$cpu.cfg ]; then source /boot/cfg/nodist/mwait.$cpu.cfg; fi
