#!/usr/bin/python

# Copyright (c) 2013, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Image
import glob
import os
import subprocess
import sys
import zlib

def main(args):
    if len(args) != 4:
        print "Usage: mkpresent slides.pdf width height"
        return 1
    pdf, width, height = args[1:]
    width = int(width)
    height = int(height)
    dimensions = "{0}x{1}".format(width, height)
    directory = os.path.join("local-files", "slides", dimensions)
    os.makedirs(directory)
    def run_pdftoppm(x, y):
        subprocess.check_call(["pdftoppm", "-scale-to-x", str(x), "-scale-to-y", str(y), pdf, os.path.join(directory, "slide")])
    run_pdftoppm(width, height)
    size = Image.open(glob.glob(os.path.join(directory, "slide-*.ppm"))[0]).size
    if size == (height, width):
        run_pdftoppm(height, width)
    elif size != (width, height):
        print "Error: pdftoppm produced images with size {0}x{1}, not the requested {2}x{3}".format(size[0], size[1], width, height)
        return 1
    for n, ppm in enumerate(sorted(glob.glob(os.path.join(directory, "slide-*.ppm"))), 1):
        try:
            img = Image.open(ppm)
        except IOError:
            break
        out = open(os.path.join(directory, "{0}z".format(n)), "wb")
        out.write(zlib.compress(img.tostring("raw", "BGRX"), 9))
        os.unlink(ppm)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
